#!/bin/bash
#
# post-merge-checkout
#
# Clean and update on git pull, merge, and checkout.
#
# Install:
#
# cp ../../hooks/post-merge-checkout .git/hooks/post-merge
# cp ../../hooks/post-merge-checkout .git/hooks/post-checkout
#
# Uninstall:
#
# rm .git/hooks/post-merge
# rm .git/hooks/post-checkout

#
# git_modified $1
#
# Return true if files matching pattern $1 have changed in git.
# Otherwise, return false.
#
# Example:
#
# if git_modified package.json; then
#   npm install
# fi
#
unset IFS
set -eEuo pipefail

git_modified() {
    ! (git rev-parse --verify 'HEAD@{1}' &>/dev/null &&
        git diff --quiet 'HEAD@{1}' HEAD -- "$1")
}

#
# git_branched $1
#
# Returns true if current branch matches pattern $1 in git.
# Otherwise, returns false.
#
# Example: git_branched master && echo "Remember, you're on master!"
#
git_branched() {
    [[ $(git rev-parse --symbolic-full-name HEAD) == */"$1" ]]
}

if git_modified Cask; then
    bash -c 'cd ~/.emacs.d/ && cask install'
fi

if git_modified .emacs; then
    emacs --batch --eval '(load "~/.emacs")' -f batch-byte-compile ~/.emacs
fi

if git_modified .vimrc; then
    vim +BundleUpdate +BundleInstall +qall
fi

reset

exit 0
